čt 6.6. 10:30
pá 14.6. 10:30
čt 20.6. (út 18.6. možná)
čt 27.6. (út 25.6. možná)
....

srpen/září

-----------
opáčko

hodnota = binární data v paměti + interpretace (datový typ = jak velké, jaká je intepretace, jaké operace)

objekt = instance třídy = model entity z reálného světa s nějakým chováním a reprezentací

v Pythonu: hodnota (procedurální) = objekt (OOP)

hodnota:    (nějaký lingvistický okýnko)
	shoda
	vhodný
	hodný
	hody
	hodina
	god (rok)
	hodit (házet)
	hodit se

ghedh - shromáždit nebo spojit

bere, brát, nábor, nabírat
vede, návod	
	e - o
 	é - ó

good
together

venetština: gad- -> katinatá

(konec vsuvky)
-----------------------

for i in iterable:

iterovatelné -> __iter__ -> vrací iterátor

	kolekce jsou iterovatelné -> __iter__ vrací iterátor přes položky
	str (pole znaků) (a podobné objekty, bytes = pole bajtů)

	range -> lenivé iterátory (hodnoty nedrží v paměti a vrací je postupně)
	range(1_000_000_000_000): jen pár bytů
	list(range(1_000_000_000_000)) -> desítky TB

	itertools -> složitější lenivé iterátory
	nekonečné iterátory:
		itertools.count(10,2) -> 10,12,14, ... nekonečno
	
	zip(iter1, iter2) -> (iter1_item1, iter2_item1), (iter1_item2, iter2_item2), ...
	enumerate(iter) -> (0, item0), (1, item1), ...
	zip(count(0), iter) -> stejná funkčnost jako enumerate()
	
	chain(iter1,iter2, ..., iter_n) -> 

	for item in chain(list1,list2):
		...


	list1.extends(list2) - zbytečně složité řešení

	dict1, dict2 -> sjednocení do jednoho

	lenivost se vyplatí (vše se provede až když je to potřeba)

--------------------------------------------
	repeat(item)
	




with context_manger [as cm]:
	body

context_manager.__enter__ (vstup do kontextu)
try:
	body
finally:
	context_manager.__exit__ (výstup z kontextu)
