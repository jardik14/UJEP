@page "/stopwatch"  
@rendermode InteractiveServer  

<PageTitle>StopWatch</PageTitle>  

<h3 style="text-align: center;">⏱ Stopwatch</h3>  

<div class="stopwatch">  
   <p>Time: @formattedTime</p>  

   <button @onclick="ToggleTimer">  
       @(isRunning ? "⏸ Pause" : "▶ Start")  
   </button>  
   <button @onclick="Reset">⏹ Reset</button>  
   <button @onclick="AddLap">📍 Add Lap</button>  
   <button @onclick="ClearLaps">Clear Laps</button>  

   @if (laps.Count > 0)  
   {  
       <h4>Laps:</h4>  
       <ul>  
       @foreach (var lap in laps)  
       {  
           <li>  
               @lap  
               <button @onclick="() => RemoveLap(lap)">🗑</button>  
           </li>  
       }  
       </ul>  
   }  
</div>  

@code {  
   private bool isRunning = false;  
   private TimeSpan elapsed = TimeSpan.Zero;  
   private System.Timers.Timer timer;  
   private DateTime startTime;  
   private List<string> laps = new();  

   private string formattedTime => elapsed.ToString(@"hh\:mm\:ss\.ff");  

   protected override void OnInitialized()  
   {  
       timer = new System.Timers.Timer(100);  
       timer.Elapsed += OnTimerElapsed;  
   }  

   private void ToggleTimer()  
   {  
       if (isRunning)  
       {  
           timer.Stop();  
           elapsed += DateTime.Now - startTime;  
       }  
       else  
       {  
           startTime = DateTime.Now;  
           timer.Start();  
       }  
       isRunning = !isRunning;  
   }  

   private void OnTimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)  
   {  
       InvokeAsync(() =>  
       {  
           elapsed = DateTime.Now - startTime;  
           StateHasChanged();  
       });  
   }  

   private void Reset()  
   {  
       timer.Stop();  
       isRunning = false;  
       elapsed = TimeSpan.Zero;  
       laps.Clear();  
   }  

   private void AddLap()  
   {  
       laps.Add(formattedTime);  
   }  

   private void RemoveLap(string lap)  
   {  
       laps.Remove(lap);  
   }  

   private void ClearLaps()  
   {  
       laps.Clear();  
   }  

   public void Dispose()  
   {  
       timer.Dispose();  
   }  
}  

<style>  
   .stopwatch {  
       max-width: 500px;  
       margin: 20px auto;  
       padding: 20px;  
       background: #f5f5f5;  
       border-radius: 10px;  
       box-shadow: 0 0 10px rgba(0,0,0,0.1);  
       font-family: Arial, sans-serif;  
   }  

   .stopwatch p {  
       font-size: 2em;  
       text-align: center;  
       margin: 10px 0;  
   }  

   .stopwatch button {  
       margin: 5px;  
       padding: 8px 12px;  
       font-size: 1em;  
       border: none;  
       border-radius: 5px;  
       background-color: #007bff;  
       color: white;  
       cursor: pointer;  
   }  

   .stopwatch button:disabled {  
       background-color: #aaa;  
       cursor: not-allowed;  
   }  

   .stopwatch ul {  
       list-style-type: none;  
       padding: 0;  
   }  

   .stopwatch li {  
       margin: 5px 0;  
       padding: 5px;  
       background-color: #eee;  
       display: flex;  
       justify-content: space-between;  
       align-items: center;  
       border-radius: 5px;  
   }  

   .stopwatch li button {  
       background-color: #dc3545;  
       padding: 4px 8px;  
       font-size: 0.9em;  
   }  
</style>
